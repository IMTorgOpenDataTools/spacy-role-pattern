from pprint import pprint
from test import parse
import role_pattern
from role_pattern_builder import RolePatternBuilder


text = 'We introduce efficient methods for fitting Boolean models to molecular data, successfully demonstrating their application to synthetic time courses generated by a number of established clock models, as well as experimental expression levels measured using luciferase imaging.'
parser = parse.Parser()
doc = parser.parse(text)


def idxs_to_tokens(idxs):
    return [doc[idx] for idx in idxs]


def test_build_pattern_and_find_matches():
    match_examples = [
        {
            'slot1': idxs_to_tokens([0, 1, 3]),  # [We, introduce, methods]
        },
        {
            'slot1': idxs_to_tokens([13, 15]),  # [demonstrating, application]
            'slot2': idxs_to_tokens([16, 19])  # [to, courses]
        },
        {
            'arg1': idxs_to_tokens([19]),  # [courses]
            'pred': idxs_to_tokens([20, 21]),  # [generated, by]
            'arg2': idxs_to_tokens([27])  # [models]
        },
    ]
    role_pattern_builder = RolePatternBuilder()
    for match_example in match_examples:
        pattern = role_pattern_builder.build(doc, match_example)
        matches = pattern.match(doc)
        assert match_example in matches


# def test_refine_pattern():
#     match_example = {
#         # 'arg1': idxs_to_tokens([3]),  # [methods]
#         'prep': idxs_to_tokens([4]),  # [for]
#         'arg': idxs_to_tokens([7]),  # [models]
#     }
#     neg_examples = [{
#         # 'arg1': idxs_to_tokens([3]),  # [methods]
#         'prep': idxs_to_tokens([8]),  # [to]
#         'arg': idxs_to_tokens([10]),  # [data]
#     }]
#     # pprint(match_example)
#     token_feature_dict = {'DEP': 'dep_'}
#     pattern = dep_pattern_builder.build_pattern(
#         doc, match_example, token_feature_dict=token_feature_dict
#     )
#     matches = dep_pattern_builder.find_matches(doc, pattern)
#     assert match_example in matches
#     assert neg_examples[0] in matches
#     pattern = dep_pattern_builder.refine_pattern(doc, pattern, match_example, neg_examples)
#     matches = dep_pattern_builder.find_matches(doc, pattern)
#     assert match_example in matches
#     assert neg_examples[0] not in matches
