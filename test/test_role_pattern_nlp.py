from pprint import pprint
import en_core_web_sm
from role_pattern_nlp import RolePatternBuilder, RolePatternSet


text = 'We introduce efficient methods for fitting Boolean models to molecular data, successfully demonstrating their application to synthetic time courses generated by a number of established clock models, as well as experimental expression levels measured using luciferase imaging.'
nlp = en_core_web_sm.load()
doc = nlp(text)


def idxs_to_tokens(idxs):
    return [doc[idx] for idx in idxs]


def test_build_pattern_and_find_matches():
    match_examples = [
        {
            'slot1': idxs_to_tokens([0, 1, 3]),  # [We, introduce, methods]
        },
        {
            'slot1': idxs_to_tokens([13, 15]),  # [demonstrating, application]
            'slot2': idxs_to_tokens([16, 19])  # [to, courses]
        },
        {
            'arg1': idxs_to_tokens([19]),  # [courses]
            'pred': idxs_to_tokens([20, 21]),  # [generated, by]
            'arg2': idxs_to_tokens([27])  # [models]
        },
    ]
    role_pattern_builder = RolePatternBuilder()
    for match_example in match_examples:
        role_pattern = role_pattern_builder.build(doc, match_example)
        matches = role_pattern.match(doc)
        assert match_example in matches


def test_refine_pattern():
    match_example = {
        # 'arg1': idxs_to_tokens([3]),  # [methods]
        'prep': idxs_to_tokens([4]),  # [for]
        'arg': idxs_to_tokens([7]),  # [models]
    }
    neg_examples = [{
        # 'arg1': idxs_to_tokens([3]),  # [methods]
        'prep': idxs_to_tokens([8]),  # [to]
        'arg': idxs_to_tokens([10]),  # [data]
    }]
    # pprint(match_example)
    feature_dict = {'DEP': 'dep_'}
    role_pattern_builder = RolePatternBuilder()
    pattern = role_pattern_builder.build(
        doc, match_example, feature_dict=feature_dict
    )
    matches = pattern.match(doc)
    assert match_example in matches
    assert neg_examples[0] in matches
    pattern = role_pattern_builder.refine(doc, pattern, match_example, neg_examples)
    matches = pattern.match(doc)
    assert match_example in matches
    assert neg_examples[0] not in matches


def test_role_pattern_set():
    match_examples = [
        {
            'slot1': idxs_to_tokens([0, 1, 3]),  # [We, introduce, methods]
        },
        {
            'slot1': idxs_to_tokens([13, 15]),  # [demonstrating, application]
            'slot2': idxs_to_tokens([16, 19])  # [to, courses]
        },
        {
            'arg1': idxs_to_tokens([19]),  # [courses]
            'pred': idxs_to_tokens([20, 21]),  # [generated, by]
            'arg2': idxs_to_tokens([27])  # [models]
        },
    ]
    pattern_set = RolePatternSet()
    role_pattern_builder = RolePatternBuilder()
    pattern_count = 0
    for match_example in match_examples:
        role_pattern = role_pattern_builder.build(doc, match_example)
        role_pattern.name = 'pattern_{}'.format(pattern_count)
        pattern_set.add(role_pattern)
        matches = role_pattern.match(doc)
        assert match_example in matches
        pattern_count += 1
    matches = pattern_set.match(doc)
    pprint(matches)
